#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('project:server');
const https = require('https');
const http = require('http');
const fs = require('fs');


const options = {
    key: fs.readFileSync('key/key.pem'),
    cert: fs.readFileSync('key/cert.pem')
};

/**
 * Get port from environment and store in Express.
 */

const port_https = normalizePort(process.env.PORT || '8443');
const port_http = normalizePort(process.env.PORT || '3000');
//app.set('port', port);

/**
 * Create HTTP server.
 */

const server_https = https.createServer(options, app);
const server_http = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server_https.listen(port_https);
server_https.on('error', onError);
server_https.on('listening', onListeningHttps);

server_http.listen(port_http);
server_http.on('error', onError);
server_http.on('listening', onListeningHttp);




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListeningHttps() {
    onListening(server_https);
}

function onListeningHttp() {
    onListening(server_http);
}


/**
 * Event listener for HTTP(S) server "listening" event.
 */

function onListening(server) {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
